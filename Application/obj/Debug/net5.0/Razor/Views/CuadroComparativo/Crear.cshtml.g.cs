#pragma checksum "C:\Users\Edson\Downloads\asd\LOGANTA\Application\Views\CuadroComparativo\Crear.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "92de385931592637034cd8aa6366131c532ed344"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_CuadroComparativo_Crear), @"mvc.1.0.view", @"/Views/CuadroComparativo/Crear.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Edson\Downloads\asd\LOGANTA\Application\Views\_ViewImports.cshtml"
using Application;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Edson\Downloads\asd\LOGANTA\Application\Views\_ViewImports.cshtml"
using Application.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"92de385931592637034cd8aa6366131c532ed344", @"/Views/CuadroComparativo/Crear.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"03ea476b5db410d4405042b0a5ed991b4e6710c5", @"/Views/_ViewImports.cshtml")]
    public class Views_CuadroComparativo_Crear : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/site.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""container w-100 text-center h1 mb-3"">Crear Cuadro Comparativo</div>
<div class=""h3"">Datos del Pedido</div>
<div class=""row mb-3 border border-dark rounded"">
    <div class=""col-8"">
        <label class=""font-weight-bold"">Código: </label>
        <label id=""pedidoCodigo""></label>
        <br />
        <label class=""font-weight-bold"">Dirección de Solicitante: </label>
        <label id=""pedidoDireccionDeSolicitante""></label>
        <br />
        <label class=""font-weight-bold"">Entregar a: </label>
        <label id=""pedidoEntregarA""></label>
        <br />
        <label class=""font-weight-bold"">Actividad Operativa: </label>
        <label id=""pedidoActividadOperativa""></label>
        <br />
        <label class=""font-weight-bold"">Motivo: </label>
        <label id=""pedidoMotivo""></label>
    </div>
    <div class=""col-4"">
        <label class=""font-weight-bold"">Fecha: </label>
        <label id=""pedidoFecha""></label>
        <br />
        <label class=""font-weight-bold"">");
            WriteLiteral(@"Hora: </label>
        <label id=""pedidoHora""></label>
    </div>
</div>
<div class=""mb-3"">
    <button class=""btn border-dark"" id=""botonCrear"">Guardar</button>
    <a class=""btn border-dark"" id=""botonVerCuadroComparativo"">Ver Cuadro Comparativo</a>
</div>
<table class=""table table-hover"">
    <thead>
        <tr>
            <th>
                Código de Item
            </th>
            <th>
                Nombre de Item
            </th>
            <th>
                Proveedor Ganador
            </th>
            <th>
                Ruc
            </th>
            <th>
                Precio
            </th>
        </tr>
    </thead>
    <tbody id=""tabla"">
    </tbody>
</table>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "92de385931592637034cd8aa6366131c532ed3445327", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    /*
     * Variables
     */
    var pedidoCodigo = document.getElementById('pedidoCodigo');
    var pedidoDireccionDeSolicitante = document.getElementById('pedidoDireccionDeSolicitante');
    var pedidoEntregarA = document.getElementById('pedidoEntregarA');
    var pedidoActividadOperativa = document.getElementById('pedidoActividadOperativa');
    var pedidoMotivo = document.getElementById('pedidoMotivo');
    var pedidoFecha = document.getElementById('pedidoFecha');
    var pedidoHora = document.getElementById('pedidoHora');
    var jsonPedido;
    var jsonItems;
    var jsonProveedores;
    var jsonItemProveedor;
    var tabla = document.getElementById('tabla');
    /*
    * Inicializar
    */
    window.addEventListener('load', function () {
        obtenerPedido();
    });
    /*
     * Obtener y mostrar datos del pedido y el resto de json
     */
    function obtenerPedido() {
        fetch(""/Pedido/ObtenerPedidoConPedidoId/"" + obtenerIdDeUrl())
            .then");
            WriteLiteral(@"(function (respuestaDelControlador) {
                return respuestaDelControlador.json();
            })
            .then(function (respuestaDelControladorConvertidoToJSON) {
                jsonPedido = respuestaDelControladorConvertidoToJSON
                mostrarPedido();
                obtenerListaDeItemsDelPedido();
                obtenerSolicitudesDeCotizacionRecividasConPedidoId();
                obtenerItemsPorProveedorConPedidoId();
                setTimeout(completarTabla, 500);
            });
    }
    function mostrarPedido() {
        pedidoCodigo.innerHTML = jsonPedido[0].id;
        pedidoDireccionDeSolicitante.innerHTML = jsonPedido[0].direccionDeSolicitante;
        pedidoEntregarA.innerHTML = jsonPedido[0].entregarA;
        pedidoActividadOperativa.innerHTML = jsonPedido[0].actividadOperativa;
        pedidoMotivo.innerHTML = jsonPedido[0].motivo;
        pedidoFecha.innerHTML = convertirFechaJsonEnFecha(jsonPedido[0].fecha);
        pedidoHora.innerHTML = conve");
            WriteLiteral(@"rtirFechaJsonEnHora(jsonPedido[0].fecha);
    }
    function obtenerListaDeItemsDelPedido() {
        fetch(""/Pedido/ObtenerItemsConPedidoId/"" + obtenerIdDeUrl()).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            jsonItems = respuestaDelControladorConvertidoToJSON;
        });
    }
    function obtenerSolicitudesDeCotizacionRecividasConPedidoId() {
        fetch(""/SolicitudDeCotizacion/ObtenerProveedoresDeLaSolicitudDecoticacionConPedidoId/"" + obtenerIdDeUrl()
        ).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            jsonProveedores = respuestaDelControladorConvertidoToJSON;
        });
    }
    function obtenerItemsPorProveedorConPedidoId() {
        fetch(""/OrdenDeCompra/ObtenerItemProveedorDeLosItemsDelPedidoConLosProveedoresCotizados/"" + ob");
            WriteLiteral(@"tenerIdDeUrl()
        ).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            jsonItemProveedor = respuestaDelControladorConvertidoToJSON;
        });
    }
    function completarTabla() {
        tabla.innerHTML = '';
        for (let i = 0; i < jsonItems.length; i++) {
            tr = document.createElement('tr');
            let ipId = jsonItems[i].ipId;
            let itemId = jsonItems[i].itemId;
            let proveedorId;
            tr.id = ipId;
            tr.innerHTML =
                '<td>' + jsonItems[i].itemId + '</td>' +
                '<td>' + jsonItems[i].itemDescripcion + '</td>' +
                '<td>' + '<select id=""proveedor' + ipId + '""></select>' + '</td>' +
                '<td>' + '<label id=""ruc' + ipId + '""></label>' + '</td>' +
                '<td>' + '<label id=""precio' + ipId + '""></label>' + '</td>';
            tabla.appendChild(tr");
            WriteLiteral(@");
            let selectProveedor = document.getElementById('proveedor' + ipId);
            let labelRuc = document.getElementById('ruc' + ipId);
            let labelPrecio = document.getElementById('precio' + ipId);
            llenarSelectConProveedores(selectProveedor);
            selectProveedor.onchange = function () {
                proveedorId = selectProveedor.value;
                for (let i = 0; i < jsonProveedores.length; i++) {
                    if (proveedorId == jsonProveedores[i].proveedorId) {
                        labelRuc.innerHTML = jsonProveedores[i].proveedorRuc;
                        break;
                    }
                }
                for (let i = 0; i < jsonItemProveedor.length; i++) {
                    if (jsonItemProveedor[i].proveedorId == proveedorId && jsonItemProveedor[i].itemId == itemId) {
                        labelPrecio.innerHTML = jsonItemProveedor[i].precio;
                        break;
                    }
                }
");
            WriteLiteral(@"            }
        }
    }
    function llenarSelectConProveedores(select) {
        for (let i = 0; i < jsonProveedores.length; i++) {
            let option = document.createElement(""option"");
            option.value = jsonProveedores[i].proveedorId;
            option.text = jsonProveedores[i].proveedorNombre;
            select.appendChild(option);
        }
    }
    /*
     * Ahora
     */
    document.getElementById('botonVerCuadroComparativo').href = ""/CuadroComparativo/Ver/"" + obtenerIdDeUrl();
    document.getElementById('botonVerCuadroComparativo').target = ""_blank"";
    /*
     Post
     */
    document.getElementById(""botonCrear"").onclick = crear;
    function crear() {
        fetch(""/OrdenDeCompra/CrearOrdenDeCompra/"", {
            method: ""POST"",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ parametro: 0 })
        }).then(function (respuestaDelControlador) {
            return respue");
            WriteLiteral(@"staDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            if (respuestaDelControladorConvertidoToJSON.estado == 0) {
                alert(respuestaDelControladorConvertidoToJSON.mensaje);
                window.location.href = respuestaDelControladorConvertidoToJSON.newUrl;
            }
            else {
                alert(respuestaDelControladorConvertidoToJSON.mensaje);
            }
        });
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
