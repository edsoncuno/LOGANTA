#pragma checksum "C:\Users\Edson\Downloads\!\TP\LOGANTA\Application\Views\Pedido\MostrarPendiente.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fb41ba52bc2d99cc050a6537240679aab42f3ca4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Pedido_MostrarPendiente), @"mvc.1.0.view", @"/Views/Pedido/MostrarPendiente.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Edson\Downloads\!\TP\LOGANTA\Application\Views\_ViewImports.cshtml"
using Application;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Edson\Downloads\!\TP\LOGANTA\Application\Views\_ViewImports.cshtml"
using Application.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fb41ba52bc2d99cc050a6537240679aab42f3ca4", @"/Views/Pedido/MostrarPendiente.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"03ea476b5db410d4405042b0a5ed991b4e6710c5", @"/Views/_ViewImports.cshtml")]
    public class Views_Pedido_MostrarPendiente : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/site.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""container w-100 h1 text-center mb-3"">Pedido Pendiente</div>
<div class=""row mb-3"">
    <div class=""col-8"">
        <label class=""font-weight-bold"">Código: </label>
        <label id=""id""></label>
        <br />
        <label class=""font-weight-bold"">Dirección de Solicitante: </label>
        <label id=""direccionDeSolicitante""></label>
        <br />
        <label class=""font-weight-bold"">Entregar a: </label>
        <label id=""entregarA""></label>
        <br />
        <label class=""font-weight-bold"">Actividad Operativa: </label>
        <label id=""actividadOperativa""></label>
        <br />
        <label class=""font-weight-bold"">Motivo: </label>
        <label id=""motivo""></label>
    </div>
    <div class=""col-4"">
        <label class=""font-weight-bold"">Fecha: </label>
        <label id=""fecha""></label>
        <br />
        <label class=""font-weight-bold"">Hora: </label>
        <label id=""hora""></label>
        <br />
        <button class=""btn border-success mb-1"" ");
            WriteLiteral(@"type=""button"" data-toggle=""modal"" data-target=""#modalAprobar"">Aprobar</button>
        <br />
        <button class=""btn border-danger mb-1"" type=""button"" data-toggle=""modal"" data-target=""#modalDesaprobar"">Desaprobar</button>
        <br />
        <button class=""btn border-dark mb-1"" id=""editarCantidades"">Editar las Cantidades de los Items</button>
    </div>
</div>
<table class=""table table-hover"">
    <thead>
        <tr class=""align-items-center"">
            <th>
                Código
            </th>
            <th>
                Descripción
            </th>
            <th>
                Cantidad
            </th>
            <th>
                Unidad de medida
            </th>
        </tr>
    </thead>
    <tbody id=""tablaConLosItems"">
    </tbody>
</table>
<!--Modal para la aprobacion-->
<div class=""modal fade"" id=""modalAprobar"" tabindex=""-1"" role=""dialog"">
    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
        <div class=""modal-content""");
            WriteLiteral(@">
            <div class=""modal-header"">
                <div class=""modal-title h5"">Aprobar</div>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div");
            BeginWriteAttribute("class", " class=\"", 2410, "\"", 2418, 0);
            EndWriteAttribute();
            WriteLiteral(@">¿Esta seguro de aprobar el pedido?</div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-success"" id=""botonAprobar"">Si</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">No</button>
            </div>
        </div>
    </div>
</div>
<!--Modal para desaprobar-->
<div class=""modal fade"" id=""modalDesaprobar"" tabindex=""-1"" role=""dialog"">
    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <div class=""modal-title h5"">Desaprobar</div>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <label>Observaciones:</label>
                <br />
                <textarea class=""w-100"" id=""obser");
            WriteLiteral("vaciones\"></textarea>\r\n                <div");
            BeginWriteAttribute("class", " class=\"", 3486, "\"", 3494, 0);
            EndWriteAttribute();
            WriteLiteral(@">¿Esta seguro de desaprobar el pedido?</div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-danger"" data-dismiss=""modal"" id=""botonDesaprobar"">Si</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">No</button>
            </div>
        </div>
    </div>
</div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fb41ba52bc2d99cc050a6537240679aab42f3ca47881", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    var pedidoId = obtenerIdDeUrl();
    //
    var jsonPedido;
    var labelId = document.getElementById('id');
    var labelDireccionDeSolicitante = document.getElementById('direccionDeSolicitante');
    var labelEntregarA = document.getElementById('entregarA');
    var labelActividadOperativa = document.getElementById('actividadOperativa');
    var labelMotivo = document.getElementById('motivo');
    var labelFecha = document.getElementById('fecha');
    var labelHora = document.getElementById('hora');
    //
    var jsonItems;
    var tablaConLosItems = document.getElementById('tablaConLosItems');
    var InputsConLaClaseInputItemPedidoCantidad;
    //
    var esEditableLasCantidades = false;
    var botonEditarCantidad = document.getElementById('editarCantidades');
    /*
     * Inicializar
     */
    window.addEventListener('load', function () {
        obtenerMostrarPedido();
        obtenerMostrarItems();
    });
    /*
     * Obtener y mostrar Pedido
     */
  ");
            WriteLiteral(@"  async function obtenerMostrarPedido() {
        await fetch(""/Pedido/ObtenerPedidoConPedidoId/"" + pedidoId).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            jsonPedido = respuestaDelControladorConvertidoToJSON
            // se coloca mostrar aqui ya que si se coloca afuera por la asincronia no tendria efecto
            mostrarPedido();
        });
    }
    function mostrarPedido() {
        labelId.innerHTML = jsonPedido[0].id;
        labelDireccionDeSolicitante.innerHTML = jsonPedido[0].direccionDeSolicitante;
        labelEntregarA.innerHTML = jsonPedido[0].entregarA;
        labelActividadOperativa.innerHTML = jsonPedido[0].actividadOperativa;
        labelMotivo.innerHTML = jsonPedido[0].motivo;
        labelFecha.innerHTML = convertirFechaJsonEnFecha(jsonPedido[0].fecha);
        labelHora.innerHTML = convertirFechaJsonEnHora(jsonPedido[0].fecha);
    }
    ");
            WriteLiteral(@"/*
     * Obtener y mostrar Items
     */
    async function obtenerMostrarItems() {
        await fetch(""/Pedido/ObtenerItemsConPedidoId/"" + pedidoId).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            jsonItems = respuestaDelControladorConvertidoToJSON;
            // se coloca mostrar aqui ya que si se coloca afuera por la asincronia no tendria efecto
            mostrarItems();
        });
    }
    function mostrarItems() {
        jsonItems.forEach(function (object) {
            var tr = document.createElement('tr');
            tr.innerHTML =
                '<td>' + object.itemId + '</td>' +
                '<td>' + object.itemDescripcion + '</td>' +
                '<td>' + '<input class=""InputItemPedidoCantidad"" type=""number"" id=""' + object.ipId + '"" value=""' + object.ipCantidad + '"" disabled> ' + '</td>' +
                '<td>' + object.itemUnidadDeMedida +");
            WriteLiteral(@" '</td>';
            tablaConLosItems.appendChild(tr);
        });
        // defino InputsConLaClaseInputItemPedidoCantidad cons los inputs generados en la tabla
        InputsConLaClaseInputItemPedidoCantidad = document.getElementsByClassName('InputItemPedidoCantidad');
        // agrego el evento de valiadocion de los datos que contienen los inputs
        agregarEventoQueValidaLosInputsConLaClaseInputItemPedidoCantidad();
    }
    /*
     * Aqui abajo es el codigo que Activa y desactiva InputsConItemDelPedido
     */
    botonEditarCantidad.addEventListener('click',cambiarEstadoDeCantidades);
    function cambiarEstadoDeCantidades() {
        if (esEditableLasCantidades == false) {
            esEditableLasCantidades = true;
            botonEditarCantidad.innerHTML = 'Dejar de Editar las Cantidades de los Items';
            activarEdicionDeCantidades();
        }
        else {
            esEditableLasCantidades = false;
            botonEditarCantidad.innerHTML = 'Editar las Cant");
            WriteLiteral(@"idades de los Items';
            desactivarEdicionDeCantidades();
        }
    }
    function activarEdicionDeCantidades() {
        for (let i = 0; i < InputsConLaClaseInputItemPedidoCantidad.length;i++) {
            InputsConLaClaseInputItemPedidoCantidad[i].disabled = false;
        }
    }
    function desactivarEdicionDeCantidades() {
        for (let i = 0; i < InputsConLaClaseInputItemPedidoCantidad.length; i++) {
            InputsConLaClaseInputItemPedidoCantidad[i].disabled = true;
        }
    }
    /*
     * Aqui abajo esta el codigo para validar las cantidades
     * El evento cambio que ayuda a validar el valor de cantidades es invocado al mostrar los items
     * ya que es necesarios obtenerlos y mostrarlos para saber cuales son y agregar los eventos
     * a cada uno
     */
    function agregarEventoQueValidaLosInputsConLaClaseInputItemPedidoCantidad() {
        for (let i = 0; i < InputsConLaClaseInputItemPedidoCantidad.length; i++) {
            InputsConLaClaseInp");
            WriteLiteral(@"utItemPedidoCantidad[i].onchange = function () {
                let resultadoDeLaValidacion = validarQueElValorSeaUnNumeroEnteroNoNegativo(InputsConLaClaseInputItemPedidoCantidad[i]);
                InputsConLaClaseInputItemPedidoCantidad[i].value = resultadoDeLaValidacion[0];
                if (resultadoDeLaValidacion[1] != null) {
                    alert(resultadoDeLaValidacion[1]);
                }
            };
        }
    }
    /*
     * Aqui se combierte la variable
     * InputsConLaClaseInputItemPedidoCantidad
     * en un json con los datos que necesito
     * para guardar los cambios en los items
     * relacionados al pedido
     */
    function obtenerJsonConLosCambiosEnLosItemsDelPedido() {
        let json = [];
        for (let i = 0; i < InputsConLaClaseInputItemPedidoCantidad.length; i++) {
            let obj = {};
            // item x pedido Id
            obj[""ipId""] = InputsConLaClaseInputItemPedidoCantidad[i].id;
            // item x pedido cantidad
    ");
            WriteLiteral(@"        obj[""ipCantidad""] = InputsConLaClaseInputItemPedidoCantidad[i].value;
            json.push(obj);
        }
        return json;
    }
    /*
     Post Aprobar
     */
    document.getElementById(""botonAprobar"").onclick = aprobar;
    function aprobar() {
        fetch(""/Pedido/AprobarPedidoPendiente/"", {
            method: ""POST"",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ pedidoId: jsonPedido[0].id, items: obtenerJsonConLosCambiosEnLosItemsDelPedido() })
        }).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            if (respuestaDelControladorConvertidoToJSON.estado == 0) {
                alert(respuestaDelControladorConvertidoToJSON.mensaje);
                window.location.href = respuestaDelControladorConvertidoToJSON.newUrl;
            }
            else {
             ");
            WriteLiteral(@"   alert(respuestaDelControladorConvertidoToJSON.mensaje);
            }
        });
    }
    /*
     Post Desaprobar
     */
    document.getElementById(""botonDesaprobar"").onclick = desaprobar;
    function desaprobar() {
        fetch(""/Pedido/DesaprobarPedidoPendiente/"", {
            method: ""POST"",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ pedidoId: jsonPedido[0].id, observaciones: document.getElementById('observaciones').value, items: obtenerJsonConLosCambiosEnLosItemsDelPedido() })
        }).then(function (respuestaDelControlador) {
            return respuestaDelControlador.json();
        }).then(function (respuestaDelControladorConvertidoToJSON) {
            if (respuestaDelControladorConvertidoToJSON.estado == 0) {
                alert(respuestaDelControladorConvertidoToJSON.mensaje);
                window.location.href = respuestaDelControladorConvertidoToJSON.newUrl;
            }
        ");
            WriteLiteral("    else {\r\n                alert(respuestaDelControladorConvertidoToJSON.mensaje);\r\n            }\r\n        });\r\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
